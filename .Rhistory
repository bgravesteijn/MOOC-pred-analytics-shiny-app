shiny::runApp()
(0.99-0.90)
(0.975-0.93)
no_rx <- function(x){0.99-(0.99-0.90)*x}
rx    <- function(x){0.975-(0.975-0.93)*x}
plot(no_rx)
plot.df <- data.frame(x=seq(0,1, by=0.01))
plot.df
plot.df <- data.frame(x=seq(0,1, by=0.05))
plot.df <- expand.grid(x=seq(0,1, by=0.05),
y=NA,
label=c("No PCI", "PCI", "Test"))
x_val <- seq(0,1, by=0.05)
no_rx(x_val)
plot.df$y[plot.df$label=="No PCI"] <- no_rx(x_val)
plot.df$y[plot.df$label=="PCI"] <- rx(x_val)
library(ggplot2)
ggplot(plot.df, aes(x=x, y=y, col=label))+geom_line
ggplot(plot.df, aes(x=x, y=y, col=label))+geom_line()
ggplot(plot.df, aes(x=x, y=y, col=label))+
geom_line()+
theme_bw()+
theme(text=element.text(size=16))
ggplot(plot.df, aes(x=x, y=y, col=label))+
geom_line()+
theme_bw()+
theme(text=element_text(size=16))
ggplot(plot.df, aes(x=x, y=y, col=label))+
geom_line()+
theme_bw()+
xlab("Risk of coronary artery disease")+
ylab("10-year event free survival")+
theme(text=element_text(size=16))
runApp()
runApp()
test <- function(x){0.99-(0.99-0.93)*x}
x_val <- seq(0,1, by=0.05)
plot.df <- expand.grid(x=x_val,
y=NA,
label=c("No PCI", "PCI", "Test"))
plot.df$y[plot.df$label=="No PCI"] <- no_rx(x_val)
plot.df$y[plot.df$label=="PCI"] <- rx(x_val)
plot.df$y[plot.df$label=="Test"] <- test(x_val)
ggplot(plot.df, aes(x=x, y=y, col=label))+
geom_line()+
theme_bw()+
xlab("Risk of coronary artery disease")+
ylab("10-year event free survival")+
theme(text=element_text(size=16))
ggplot(plot.df, aes(x=x, y=y, col=label))+
geom_line(cex=2)+
theme_bw()+
xlab("Risk of coronary artery disease")+
ylab("10-year event free survival")+
theme(text=element_text(size=16))
ggplot(plot.df, aes(x=x, y=y, col=label))+
geom_line(cex=2)+
theme_bw()+
scale_color_discrete("Legend")+
xlab("Risk of coronary artery disease")+
ylab("10-year event free survival")+
theme(text=element_text(size=16))
runApp()
runApp()
runApp()
netharm    <- 0.015
netbenefit <- 0.030
output$test_characteristics
output$test_characteristics = renderUI({
if (input$test == "Perfect"){
return(NULL)
}
if(input$test == "Imperfect"){
sliderInput("False positive rate", "Choose your value", min=0, max=0.5, value=0.1)
sliderInput("False negative rate", "Choose your value", min=0, max=0.5, value=0.1)
sliderInput("Toll", "Choose your value", min=0, max=0.5, value=0)
}
})
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shinyUI(fluidPage(
# Application title
titlePanel("Clinical Decision Making"),
# Sidebar with a slider input
sidebarLayout(
sidebarPanel(
selectInput("test",
"Type of test:",
choices = c("Perfect", "Imperfect"),
selected = "Perfect")
),
uiOutput("char"),
# Show the plot of the decision figure
mainPanel(
plotOutput("distPlot")
)
)
))
0.99-0.975
0.90-0.93
runApp()
runApp()
runApp()
runApp()
(netbenefit*input$fnr)
runApp()
runApp()
runApp()
runApp()
rsconnect::setAccountInfo(name='leidenphm',
token='82EFA2940E83CA410D351A365D088AC4',
secret='z/CdqhuEBPBW3ll4/fVPd1IFYyiy4rt1+p1vsAhq')
runApp()
ggplot(plot.df, aes(x=x, y=y, col=label))+
geom_line(cex=2)+
theme_bw()+
scale_y_continuous(limits=0.9,1)+
scale_color_discrete("Legend")+
xlab("Risk of heart attack")+
ylab("10-year event free survival")+
theme(text=element_text(size=16))
library(shiny)
library(ggplot2)
no_rx <- function(x){0.99-(0.99-0.90)*x}
rx    <- function(x){0.975-(0.975-0.93)*x}
netharm    <- 0.015
netbenefit <- 0.030
test <- function(x){
itcpt <- 0.99-(netharm*input$fpr)
slope <- -(itcpt-(0.93-(netbenefit*input$fnr)))
res <- (itcpt+slope*x)-input$Toll
return(res)
}
x_val <- seq(0,1, by=0.05)
plot.df <- expand.grid(x=x_val,
y=NA,
label=c("No PCI", "PCI", "Test"))
plot.df$y[plot.df$label=="No PCI"] <- no_rx(x_val)
plot.df$y[plot.df$label=="PCI"] <- rx(x_val)
plot.df$y[plot.df$label=="Test"] <- test(x_val)
ggplot(plot.df, aes(x=x, y=y, col=label))+
geom_line(cex=2)+
theme_bw()+
scale_y_continuous(limits=0.9,1)+
scale_color_discrete("Legend")+
xlab("Risk of heart attack")+
ylab("10-year event free survival")+
theme(text=element_text(size=16))
ggplot(plot.df, aes(x=x, y=y, col=label))+
geom_line(cex=2)+
theme_bw()+
scale_y_continuous(limits=c(0.9,1))+
scale_color_discrete("Legend")+
xlab("Risk of heart attack")+
ylab("10-year event free survival")+
theme(text=element_text(size=16))
ggplot(plot.df, aes(x=x, y=y, col=label))+
geom_line(cex=2)+
theme_bw()+
scale_y_continuous(limits=c(0.9,1),minor_breaks = seq(0.9, 1, 10), breaks = seq(0.9, 1, 10))+
scale_color_discrete("Legend")+
xlab("Risk of heart attack")+
ylab("10-year event free survival")+
theme(text=element_text(size=16))
ggplot(plot.df, aes(x=x, y=y, col=label))+
geom_line(cex=2)+
theme_bw()+
scale_y_continuous(limits=c(0.9,1),minor_breaks = seq(0.9, 1, 5), breaks = seq(0.9, 1, 10))+
scale_color_discrete("Legend")+
xlab("Risk of heart attack")+
ylab("10-year event free survival")+
theme(text=element_text(size=16))
ggplot(plot.df, aes(x=x, y=y, col=label))+
geom_line(cex=2)+
theme_bw()+
scale_y_continuous(limits=c(0.9,1),minor_breaks = seq(0.9, 1, 0.05), breaks = seq(0.9, 1, 0.1))+
scale_color_discrete("Legend")+
xlab("Risk of heart attack")+
ylab("10-year event free survival")+
theme(text=element_text(size=16))
ggplot(plot.df, aes(x=x, y=y, col=label))+
geom_line(cex=2)+
theme_bw()+
scale_y_continuous(limits=c(0.9,1),minor_breaks = seq(0.9, 1, 0.005), breaks = seq(0.9, 1, 0.01))+
scale_color_discrete("Legend")+
xlab("Risk of heart attack")+
ylab("10-year event free survival")+
theme(text=element_text(size=16))
ggplot(plot.df, aes(x=x, y=y, col=label))+
geom_line(cex=2)+
theme_bw()+
scale_y_continuous(limits=c(0.9,1),
minor_breaks = seq(0.9, 1, 0.005),
breaks = seq(0.9, 1, 0.01))+
scale_x_continuous(minor_breaks=seq(0, 1, 0.05),
breaks=seq(0,1,0.1))
ggplot(plot.df, aes(x=x, y=y, col=label))+
geom_line(cex=2)+
theme_bw()+
scale_y_continuous(limits=c(0.9,1),
minor_breaks = seq(0.9, 1, 0.005),
breaks = seq(0.9, 1, 0.01))+
scale_x_continuous(minor_breaks=seq(0, 1, 0.05),
breaks=seq(0,1,0.1))+
scale_color_discrete("Legend")+
xlab("Risk of heart attack")+
ylab("10-year event free survival")+
theme(text=element_text(size=16))
# This is the server logic for a Shiny web application.
# You can find out more about building applications with Shiny here:
#
# http://shiny.rstudio.com
#
library(shiny)
library(ggplot2)
shinyServer(function(input, output) {
output$distPlot <- renderPlot({
no_rx <- function(x){0.99-(0.99-0.90)*x}
rx    <- function(x){0.975-(0.975-0.93)*x}
netharm    <- 0.015
netbenefit <- 0.030
test <- function(x){
itcpt <- 0.99-(netharm*input$fpr)
slope <- -(itcpt-(0.93-(netbenefit*input$fnr)))
res <- (itcpt+slope*x)-input$Toll
return(res)
}
x_val <- seq(0,1, by=0.05)
plot.df <- expand.grid(x=x_val,
y=NA,
label=c("No PCI", "PCI", "Test"))
plot.df$y[plot.df$label=="No PCI"] <- no_rx(x_val)
plot.df$y[plot.df$label=="PCI"] <- rx(x_val)
plot.df$y[plot.df$label=="Test"] <- test(x_val)
ggplot(plot.df, aes(x=x, y=y, col=label))+
geom_line(cex=2)+
theme_bw()+
scale_y_continuous(limits=c(0.9,1),
minor_breaks = seq(0.9, 1, 0.005),
breaks = seq(0.9, 1, 0.01))+
scale_x_continuous(minor_breaks=seq(0, 1, 0.05),
breaks=seq(0,1,0.1))+
scale_color_discrete("Legend")+
xlab("Risk of heart attack")+
ylab("10-year event free survival")+
theme(text=element_text(size=16))
# # generate bins based on input$bins from ui.R
# x    <- faithful[, 2]
# bins <- seq(min(x), max(x), length.out = input$bins + 1)
#
# # draw the histogram with the specified number of bins
# hist(x, breaks = bins, col = 'darkgray', border = 'white')
})
})
# This is the user-interface definition of a Shiny web application.
# You can find out more about building applications with Shiny here:
#
# http://shiny.rstudio.com
#
library(shiny)
shinyUI(fluidPage(
# Application title
titlePanel("Clinical Decision Making"),
# Sidebar with a slider input
sidebarLayout(
sidebarPanel(
list(sliderInput("fpr", "False positive rate", min=0, max=0.5, value=0),
sliderInput("fnr", "False negative rate", min=0, max=0.5, value=0),
sliderInput("Toll", "Toll of the test", min=0, max=0.02, value=0)
)
),
# Show the plot of the decision figure
mainPanel(
plotOutput("distPlot")
)
)
))
rsconnect::setAccountInfo(name='leidenphm',
token='82EFA2940E83CA410D351A365D088AC4',
secret='z/CdqhuEBPBW3ll4/fVPd1IFYyiy4rt1+p1vsAhq')
shiny::runApp()
shiny::runApp()
